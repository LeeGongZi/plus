本文档为python文件的说明文档，该python程序的作用是让机器自动学会三位数以下的加法，基于tensorflow，开源包还利用了numpy。


数据是生成了1000以内的两个加数与其和，排列组合一共有100万（1000×1000）组加数的组合。

随机打乱生成的100万组数据。之后训练数据60万组，验证数据20万组，测试数据20万组。


数据生成之后会格式化，把每个数据用其每一位即千位，百位，十位，个位上的数字来表示（只有输出数据有千位）。

如果该位数字为几，则相应第几为置1,其余为0.

即，输入数据有60位，每个加数占30位，一共两个加数。
30位分别表示加数的百位，十位以及个位的数字（0～9）。

例，若加数为352和25,则输入表示为：

[0,0,0,1,0,0,0,0,0,0,    #第一个加数的百位，3这个位置为1,其余为0

0,0,0,0,0,1,0,0,0,0,     #第一个加数的十位，5的位置为1

0,0,1,0,0,0,0,0,0,0,     #第一个加数的个位，2的位置为1

1,0,0,0,0,0,0,0,0,0,     #第二个加数的百位，0的位置为1（因为第二个加数是两位数）

0,0,1,0,0,0,0,0,0,0,     #第二个加数的百位，2的位置为1

0,0,0,0,0,1,0,0,0,0]     #第二个加数的百位，5的位置为1

输出数据有32位，前两位表示千位为0或者1,后30位与输入数据的表示相同。（因为三位数相加有可能得到千位，但千位最多为1）


神经网络模型输入层为60个神经元，隐藏层为2048个神经元，输出层为32个神经元，都为全连接的。

隐藏层和输出层的激活函数为sigmoid激活函数（具体设计见代码）。



其他一些参数的选择：epoch为50，batch大小为50.


目标函数为计算输出与真实值之间的二次方差的和，优化采用AdamOptimizer，参数如learningrate等采用tensorflow中该函数的默认值。


模型在测试集上的准确率为：95.945%


以上所有详见代码。
